name: CI (Linux)

on:
  push:
    paths:
    - '.github/workflows/**'
    - '3rdparty/**'
    - 'hash/**'
    - 'scripts/**'
    - 'src/**'
    - 'COPYING'
    - 'makefile'
  pull_request:
    paths:
    - '.github/workflows/**'
    - '3rdparty/**'
    - 'hash/**'
    - 'scripts/**'
    - 'src/**'
    - 'COPYING'
    - 'makefile'

permissions:
  contents: read

jobs:
  build-linux:
    strategy:
      matrix:
        compiler: [gcc-x64, clang-x64, gcc-arm64, clang-arm64, gcc-arm32, clang-arm32]
        include:
          - compiler: gcc-x64
            runs-on: ubuntu-latest
            cc: gcc
            cxx: g++
            archopts: "-U_FORTIFY_SOURCE -m64"
            subtarget: tiny
            executable: mametiny
          - compiler: clang-x64
            runs-on: ubuntu-latest
            cc: clang
            cxx: clang++
            archopts: "-m64"
            subtarget: mame
            executable: mame
          - compiler: gcc-arm64
            runs-on: ubuntu-latest
            cc: aarch64-linux-gnu-gcc
            cxx: aarch64-linux-gnu-g++
            archopts: ""
            subtarget: tiny
            executable: mametiny
          - compiler: clang-arm64
            runs-on: ubuntu-latest
            cc: clang
            cxx: clang++
            archopts: "--target=aarch64-linux-gnu"
            subtarget: mame
            executable: mame
          - compiler: gcc-arm32
            runs-on: ubuntu-latest
            cc: arm-linux-gnueabihf-gcc
            cxx: arm-linux-gnueabihf-g++
            archopts: ""
            subtarget: tiny
            executable: mametiny
          - compiler: clang-arm32
            runs-on: ubuntu-latest
            cc: clang
            cxx: clang++
            archopts: "--target=arm-linux-gnueabihf"
            subtarget: mame
            executable: mame
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@main
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: |
        sudo apt-get update
        # Instalar dependências de desenvolvimento para arquiteturas nativas e cross
        sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev libfontconfig-dev libasound2-dev libxinerama-dev libxi-dev qtbase5-dev qtbase5-dev-tools
    - name: Install cross-compilation tools for ARM
      if: contains(matrix.compiler, 'arm')
      run: |
        # Instalar toolchains de cross-compilação
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        # Instalar bibliotecas de desenvolvimento para ARM
        sudo apt-get install -y libsdl2-dev:arm64 libsdl2-ttf-dev:arm64 libfontconfig-dev:arm64
        sudo apt-get install -y clang
    - name: Install clang for x64
      if: matrix.compiler == 'clang-x64'
      run: sudo apt-get install -y clang
    - name: Build
      env:
        OVERRIDE_CC: ${{ matrix.cc }}
        OVERRIDE_CXX: ${{ matrix.cxx }}
        ARCHOPTS: ${{ matrix.archopts }}
        SUBTARGET: ${{ matrix.subtarget }}
        TOOLS: 1
      run: |
        # Para builds cross, precisamos definir variáveis adicionais
        if [[ "${{ matrix.compiler }}" == *"arm"* ]]; then
          if [[ "${{ matrix.compiler }}" == *"64"* ]]; then
            export CROSS=aarch64-linux-gnu-
          else
            export CROSS=arm-linux-gnueabihf-
          fi
        fi
        make -j3
    - name: Validate (skip for cross-compiled builds)
      if: ${{ !contains(matrix.compiler, 'arm') }}
      run: ./${{ matrix.executable }} -validate
    - name: Reconcile driver list (skip for cross-compiled builds)
      if: ${{ !contains(matrix.compiler, 'arm') }}
      run: ./${{ matrix.executable }} -listxml | python scripts/build/makedep.py reconcilelist -l src/mame/${{ matrix.subtarget }}.lst -
    - name: ORM check (skip for cross-compiled builds)
      if: ${{ !contains(matrix.compiler, 'arm') }}
      run: python scripts/minimaws/minimaws.py load --executable ./${{ matrix.executable }} --softwarepath hash
    - uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.executable }}-linux-${{ matrix.compiler }}-${{ github.sha }}
        path: |
          ${{ matrix.executable }}
          chdman
          unidasm
        if-no-files-found: error
